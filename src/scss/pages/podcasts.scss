@import "../abstracts/dir";

$makeshift-red: #ff3d3b;
$podcast-blue: #0d2ed1;

//functional classes
.makeshift-red {
	color: $makeshift-red;
}

.monospace {
	font-family: "Alma Mono";
	font-style: normal;
	font-weight: 400;
}

//BEM classes
.makeshift__aside__button {
	@include btn-base;
	background-color: white;
	color: $podcast-blue;
	font-weight: bold;
	margin-top: $grid * 4;

	&:hover,
	&:focus {
		color: white !important;
		background-color: $makeshift-red;
	}
}

.makeshift__playtrailer {
	display: block;
	color: $makeshift-red;
	margin-top: $grid * 3;
	transition: color 150ms;

	svg {
		transform: translate(0, 5px);
		.change {
			transition: fill 150ms;
			fill: $makeshift-red;
		}
	}

	&:hover,
	&:focus {
		color: white !important;
		text-decoration: none;
		.change {
			fill: white;
		}
	}
}

.podcasts {
	@extend .monospace;
	font-size: 18px;
	@media screen and (min-width: $large) {
		font-size: 20px;
	}
}

.podcasts [class*="heading"] {
	@extend .monospace;
}

.makeshift {
	margin-top: $grid * 11;

	a {
		color: $makeshift-red;
		&:hover,
		&:focus {
			color: white;
		}
	}
}

.makeshift__aside {
	margin-top: $grid * 16;
	margin-bottom: $grid * 16;
	padding: $grid * 2;
	text-align: center;
	background-color: $podcast-blue;
}


.makeshift__audio {
	text-align: center;
	margin: $grid * 3 auto;
}

.makeshift__description {
	text-align: center;
	margin-top: $grid * 3;
}

.makeshift__header {
	padding-top: $grid * 14;
}

.makeshift__body_text {
	color: #D8D8D8;
	font-family: $font-body;
    font-weight: 400;
}

.makeshift__title {
	text-align: center;
	font-size: 1.5rem;
	margin-top: 0;
	line-height: 1.25em;
	display: block;
}

.makeshift__title__subtitle {
	display: block;
	font-size: 1.8rem;
	line-height: 1.15em;
	max-width: 600px;
	margin: ($grid * 2) auto $grid;
}

.makeshift__id {
	display: block;
	text-align: center;
	margin-bottom: $grid * 3;

	&::before,
	&::after {
		content: "/";
		padding: 0 $grid;
		color: red;
	}
}

.makeshift__syndications {
	margin-top: $grid * 8;
	.makeshift__syndications__item {
		padding: $grid;
		max-width: 165px;
		height: $grid * 8;

		img {
			height: 100%;
			width: 100%;
			object-fit: contain;
			// object-position: center;
		}
	}
}

a.makeshift__link {
	color: white;
	margin-top: 0;
	width: 100%;

	&:hover,
	&:focus {
		color: $makeshift-red;
		text-decoration: none;
	}
}

a.makeshift__logo {
	@extend .monospace;

	color: white;
	display: block;
	font-size: 4rem;
	letter-spacing: 0.27em;
	line-height: 0.95;
	text-transform: uppercase;
	transition: color 200ms;

	&:hover,
	&:focus {
		text-decoration: none;
		color: $makeshift-red;
		.glitch,
		.glitch::before,
		.glitch::after {
			animation-duration: 6s;
		}
	}
}

@media (max-width: $large) {
	a.makeshift__logo {
		text-align: center;
	}

	.makeshift__subheading {
		margin-top: $grid * 4;
		text-align: center;
	}
}

@media (min-width: $medium) {
	a.makeshift__logo {
		font-size: 6rem;
	}


.makeshift__aside {
	padding: $grid * 8;
}

	.makeshift__title {
		font-size: 2.25rem;
	}

	.makeshift__header {
		padding-top: $grid * 20;
	}
}

@media (min-width: $large) {
	a.makeshift__logo {
		flex: 0 1 28rem;
	}

	.makeshift__subheading {
		flex: 0 1 22rem;
		margin-left: $grid * 7;
	}
}

///glitch text effect from https://css-tricks.com/glitch-effect-text-images-svg/
.glitch {
	display: block;
	margin-top: 0;
	position: relative;
	color: $makeshift-red;
}
.glitch::before,
.glitch::after {
	content: attr(data-text);
	position: absolute;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
	color: $makeshift-red;
}

.glitch::before {
	left: 2px;
	text-shadow: -1px 0 $podcast-blue;
	background: black;
	clip: rect(44px, 450px, 56px, 0);
	animation: noise-anim 18s infinite linear alternate-reverse;
}
.glitch::after {
	left: -2px;
	text-shadow: -1px 0 $podcast-blue;
	/* important: opaque background masks the original */
	background: black;
	animation: noise-anim 18s infinite linear alternate-reverse;
}

@keyframes noise-anim {
	$steps: 20;
	@for $i from 0 through $steps {
		#{percentage($i*(1/$steps))} {
			$top: random(100);
			$bottom: random(101 - $top);
			clip-path: inset(#{$top}% 0 #{$bottom}% 0);
		}
	}
}
